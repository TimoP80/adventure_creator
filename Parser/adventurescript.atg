COMPILER AdventureScript    
(*

Parser grammar for adventure creator's scripting language
  
  *)

DELPHI
  PRIVATE
    fOutputStream : TMemoryStream;
    fSubSelectDepth : integer;
    fInNaturalJoin : boolean;
            
    procedure Init;
    procedure Final;
                
    property OutputStream : TMemoryStream read fOutputStream write fOutputStream;
    CREATE 
    fOutputStream := TMemoryStream.Create;
  DESTROY                     
    fOutputStream.Free;
  ERRORS
 
END_DELPHI

(* Arbitrary Code *)

const
  PadLen = 20;
                        
function PadR(S : string; Ch : char; L : integer) : string;
var
  i : integer;
begin
  for i := 1 to L - (Length(s)) do
    s := s + Ch;
  Result := s;
end;

procedure T-->Grammar<--.Init;
begin
  OutputStream.Clear;

 end;

procedure T-->Grammar<--.Final;
begin
   OutputStream.Position := 0;
  OutputStream.SaveToStream(ListStream);
  OutputStream.Clear;
end;
                                 
                                 
function parse_string(zstr: string): string;
var t:    integer;
var temp: string;
var len:  integer;
begin;
  len := 0;
  temp:='';
  //writeln ('Parsing string: ',zstr);
  t   := pos('"', zstr) + 1;
  len := length(zstr);
  while (zstr[t] <> '"') do
  begin;
    //writeln (zstr[t]);
    if (zstr[t] = '\') and (zstr[t + 1] = '"') then
    begin;
      temp := temp + '"';
      Inc(t, 1);
    end else                   
    if (zstr[t] = '\') and (zstr[t + 1] = '\') then
    begin;
      temp := temp + '\';
      Inc(t, 1);
    end
    else
    if (zstr[t] = '\') and (zstr[t + 1] = 't') then
    begin;
      temp := temp + #9;
      Inc(t, 1);
    end else
    if (zstr[t] = '\') and (zstr[t + 1] = 'n') then
    begin;
      temp := temp + #13#10;
      Inc(t, 1);
    end else

      temp := temp + zstr[t];

    Inc(t);
  end;
   Result := temp;
end;


(* End of Arbitrary Code *)

IGNORE CASE

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  lf       = CHR(10) .
  eol      = CHR(13) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - "'" .
  strings  = CHR(32) .. CHR(255) - '"'.
  macros   = ANY - eol.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE
  tab + eol + lf

TOKENS
  identifier = ( "_" | letter) { "_" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  _string     = '"' { strings } '"' .
  _char       = "'" [ "\" ] chars "'" .
  _library    = "<" files { files } ">" .

IGNORE CHR(1)..CHR(32)

PRODUCTIONS

Condition = (. 
instruction_temp := AddInstruction(CurrentScript, OP_CONDITION);
   .) "(" identifier 
(. 

 AddParam(instruction_temp, LexString, DATA_TYPE_IF_VARIABLE);
  
.) ("==" 
(. 
  AddParam(instruction_temp, IF_EVAL_EQUALS, DATA_TYPE_IF_EVAL);
.)
| 
"!=" 
(.

  AddParam(instruction_temp, IF_EVAL_NOT_EQUAL, DATA_TYPE_IF_EVAL);
    

.)
|
 ">" 
 
 (.
 
   AddParam(instruction_temp, IF_EVAL_LARGER, DATA_TYPE_IF_EVAL);
  
 .)
 
| 
">="
(.
  AddParam(instruction_temp, IF_EVAL_LARGER_OR_EQUAL, DATA_TYPE_IF_EVAL);
  
.) |
  "<="
(.

  AddParam(instruction_temp, IF_EVAL_LESS_OR_EQUAL, DATA_TYPE_IF_EVAL);
  
.)
   |
    "<"
(.
  AddParam(instruction_temp, IF_EVAL_LESS, DATA_TYPE_IF_EVAL);
  
.)
    ) 
 (_string 
(. 
  AddParam(instruction_temp, parse_string(lexstring), DATA_TYPE_IF_VALUE);
  
.)|
 number (. 
  AddParam(instruction_temp, strtoint(lexstring), DATA_TYPE_IF_VALUE);
  
.) | identifier (. 
  AddParam(instruction_temp, lexstring, DATA_TYPE_IF_VALUE);
  
.) ) ")" (. 
 NextInstruction(currentscript, instruction_temp);

.).

                         
Conditions = Condition 
{
("&&" 
(.

     instruction_temp := AddInstruction(CurrentScript, OP_IF_CONNECTOR);
     AddParam(instruction_temp, IF_CONNECT_AND, DATA_TYPE_IF_CONNECTOR);
     NextInstruction(CurrentScript, instruction_temp);

.)
| "|"
(.
     instruction_temp := AddInstruction(CurrentScript, OP_IF_CONNECTOR);
     AddParam(instruction_temp, IF_CONNECT_OR, DATA_TYPE_IF_CONNECTOR);
     NextInstruction(CurrentScript, instruction_temp);

.)

) 
Condition}. 

IfStatement = 
(. 
  instruction_temp := AddInstruction(CurrentScript, OP_CONDITION_BLOCK_START);
  NextInstruction(currentscript, instruction_temp);
.)
"if" 
(. 
  instruction_temp := AddInstruction(CurrentScript, OP_IF);
  NextInstruction(currentscript, instruction_temp);
.) Conditions (.  instruction_temp := AddInstruction(CurrentScript, OP_END_CONDITIONLIST);
  NextInstruction(CurrentScript, instruction_temp);
 .) "{" 
(. 
  instruction_temp := AddInstruction(CurrentScript, OP_IFBEGIN);
  NextInstruction(currentscript, instruction_temp);

.) {Command} "}" 
(. 
  instruction_temp := AddInstruction(CurrentScript, OP_IFEND);
  NextInstruction(currentscript, instruction_temp);

.) [{"else" (. 
  instruction_temp := AddInstruction(CurrentScript, OP_IF_ELSE);
  NextInstruction(currentscript, instruction_temp);

.)["if" (. 
  instruction_temp := AddInstruction(CurrentScript, OP_IF_CHAINED);
  NextInstruction(currentscript, instruction_temp);

.) Conditions (. 
  instruction_temp := AddInstruction(CurrentScript, OP_END_CONDITIONLIST);
  NextInstruction(CurrentScript, instruction_temp);

.) ] "{" 
(. 
  instruction_temp := AddInstruction(CurrentScript, OP_IFELSEBEGIN);
  NextInstruction(currentscript, instruction_temp);

.) {Command} "}" (.   instruction_temp := AddInstruction(CurrentScript, OP_IFELSEEND);
  NextInstruction(currentscript, instruction_temp);
 .) }]

(. 

  instruction_temp := AddInstruction(CurrentScript, OP_CONDITION_BLOCK_END);
  NextInstruction(currentscript, instruction_temp);
.) .


FunctionParam =  ("int"  (. 
AddParam(instruction_temp, PARAM_TYPE_INT, DATA_TYPE_FUNCTION_PARAMETER_TYPE);
 
.) | "str" (. 
AddParam(instruction_temp, PARAM_TYPE_STRING, DATA_TYPE_FUNCTION_PARAMETER_TYPE);
.) ) (_string 
(. 
 AddParam(instruction_temp, parse_string(lexstring), DATA_TYPE_FUNCTION_PARAMETER);
  .) | number 
 (.
  AddParam(instruction_temp, strtoint(lexstring), DATA_TYPE_FUNCTION_PARAMETER);
 
 .) |
  identifier 
  (. 
  AddParam(instruction_temp, lexstring, DATA_TYPE_FUNCTION_PARAMETER);
 
  .) ) .

Param = (_string 
(. 
 AddParam(instruction_temp, parse_string(lexstring), DATA_TYPE_PARAMETER_STRING);
  .) | number 
 (.
  AddParam(instruction_temp, strtoint(lexstring), DATA_TYPE_PARAMETER_INT);
 
 .) |
  identifier 
  (. 
  AddParam(instruction_temp, lexstring, DATA_TYPE_PARAMETER_VARIABLEDEF);
 
  .) ) .
RandomChance = "RandomChance" 
(. 
 instruction_temp := AddInstruction(CurrentScript, OP_RANDOMCHANCE);

.) "(" number 
(. 
 AddParam(instruction_temp, strtoint(lexstring), DATA_TYPE_PROBABILITY);
 
.) 
")" "set" "target_node" _string 
(.
 AddParam(instruction_temp, parse_string(lexstring), DATA_TYPE_TARGETNODE);
 NextInstruction(currentscript,instruction_temp);

.) .

RegularCommand = identifier 
(. 

  instruction_temp := AddInstruction(currentscript, OP_FUNCTIONCALL);
  if (isValidFunctionName(CurrentScript,lexstring)=false) then
  begin
   SemError(47, lexstring);
  end;
  AddParam(instruction_temp, lexstring, DATA_TYPE_FUNCTION_NAME);

.) "(" [Param {"," Param}] ")"  (. 
NextInstruction(CurrentScript,instruction_temp);
.) .              

RegularData =  identifier 
(. 
  AddParam(instruction_temp, lexstring, DATA_TYPE_REGULARDATA);
  NextInstruction(currentscript, instruction_temp);

.) | number  
(. 
  AddParam(instruction_temp, VarAsType(strtoint(lexstring), VarInteger), DATA_TYPE_REGULARDATA);
  NextInstruction(currentscript, instruction_temp);

.) | _string 
(. 
  AddParam(instruction_temp, parse_string(lexstring), DATA_TYPE_REGULARDATA);
  NextInstruction(currentscript, instruction_temp);

.) .

Expression = "+" 
(.
    instruction_temp := AddInstruction(currentscript, OP_ADD);
.) |"-"| 
(.
    instruction_temp := AddInstruction(currentscript, OP_SUBTRACT);

.)
| "/" 
(.
    instruction_temp := AddInstruction(currentscript, OP_DIVIDE);

.) |"*" 
(. 
    instruction_temp := AddInstruction(currentscript, OP_MULTIPLY);

.) .

RegularExp = (.
   instruction_temp := AddInstruction(currentscript, OP_EXPRESSIONDATA);

 .) RegularData {
Expression (.     
NextInstruction(currentscript, instruction_temp);
.)
 (.
   instruction_temp := AddInstruction(currentscript, OP_EXPRESSIONDATA);

 .)RegularData} (. instruction_temp  :=  AddInstruction(currentscript,  OP_ENDINSTRUCTION);
NextInstruction(CurrentScript,  instruction_temp);
.).

SetVar = "SetVar" "$" identifier 
(.

  instruction_temp := AddInstruction(currentscript, OP_BEGININSTRUCTION);
  NextInstruction(CurrentScript, instruction_temp);
  name_temp := lexstring;
  instruction_temp :=AddInstruction(currentscript, OP_SETVAR);
  AddParam(instruction_temp, name_temp, DATA_TYPE_VAR_NAME);
  NextInstruction(CurrentScript, instruction_temp);
 
   if VariableExists(currentscript, name_temp)=false then
  AddVariable(currentscript, name_temp);

  
.)
 "=" (RegularCommand 
 (. 
  instruction_temp := AddInstruction(currentscript, OP_ENDINSTRUCTION);
  NextInstruction(CurrentScript, instruction_temp);

 .) | 
 RegularExp).

 CaseLabel = (_string (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_LABEL);
  AddParam(instruction_temp,parse_string(LexString),DATA_TYPE_SWITCH_LABEL_DATA);
  NextInstruction(CurrentScript, instruction_temp);
 .) |number (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_LABEL);
  AddParam(instruction_temp,strtotine(LexString),DATA_TYPE_SWITCH_LABEL_DATA);
  NextInstruction(CurrentScript, instruction_temp);
 .)|identifier (.
  instruction_temp := AddInstruction(currentscript, OP_SWITCH_LABEL);
  AddParam(instruction_temp,LexString,DATA_TYPE_SWITCH_LABEL_DATA);
  NextInstruction(CurrentScript, instruction_temp);
 
  .) ) ":" "{" (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_LABEL_CODE_BEGIN); NextInstruction(CurrentScript, instruction_temp); .) {Command} "}" 
 (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_LABEL_CODE_END); NextInstruction(CurrentScript, instruction_temp); .).

SwitchStatement = "switch" (.   instruction_temp := AddInstruction(currentscript, OP_SWITCH_VAR); .) identifier (. AddParam(instruction_temp, lexstring, DATA_TYPE_SWITCH_VAR); NextInstruction(CurrentScript, instruction_temp); .)
            "{"  (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_BEGIN);
  NextInstruction(CurrentScript, instruction_temp);
 .)
            CaseLabel {CaseLabel} 
            "}" (. instruction_temp := AddInstruction(currentscript, OP_SWITCH_END);
  NextInstruction(CurrentScript, instruction_temp);
 .) . 
                         

Command = (RegularCommand | SetVar | RandomChance)  ";" .

    
FuncDefinition = ("int" 
(. 
    return_type_temp := RETURN_TYPE_INTEGER;

.) 
| "void" 
(. 
    return_type_temp := RETURN_TYPE_VOID;

.)
| "str" 
(.
    return_type_temp := RETURN_TYPE_STRING;

 .)
) identifier 
(.
  name_temp := lexstring;
  instruction_temp := AddInstruction(CurrentScript, OP_FUNCTIONDEF);
  AddParam(instruction_temp, name_temp, DATA_TYPE_FUNCTION_NAME);
  AddParam(instruction_temp, return_type_temp, DATA_TYPE_RETURN_TYPE);
  NextInstruction(CurrentScript, instruction_temp);

.) "(" [FunctionParam {"," FunctionParam}] ")"  "{" 
(.
  instruction_temp := AddInstruction(CurrentScript, OP_FUNCTIONBEGIN);
  NextInstruction(CurrentScript, instruction_temp);
 .)

  {(Command|IfStatement|SwitchStatement)} "}" 
  (.
  instruction_temp := AddInstruction(CurrentScript, OP_FUNCTIONEND);
  NextInstruction(CurrentScript, instruction_temp);
 .).

   VariableDefinition = identifier (. 
 name_temp:=lexstring;
 AddVariable(CurrentScript, name_temp); 
 .) ["=" (_string 
 (. 
 SetVariableValue(CurrentScript, name_temp, parse_string(lexstring))); 
 .) |number 
 
 (. 
 SetVariableValue(CurrentScript, name_temp, strtoint(lexstring)); 
  .)| hexnumber 
  (. 
  SetVariableValue(CurrentScript, name_temp, strtoint(lexstring)); 
  .) )] ";"  .

  
  
    GlobalVars = "var" VariableDefinition {VariableDefinition}.


    AdventureScript = ["GlobalVariables" ":" GlobalVars] "Functions" ":" FuncDefinition {FuncDefinition} .
                          
                                                           
END AdventureScript.
